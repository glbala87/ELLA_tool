#!/bin/bash -e

# For dev/demo use only! Production uses external database

# Create the Postgres data directory, the database cluster in said folder and start the server.
#
# We make sure to shutdown postgres gently. Some shutdown modes will put postgres in bad state, making
# a restart take a long time (replay of xlog/transaction logs).
#
# Also handles multiple start/stop cycles (Ã­.e. using supervisorctl to stop/start). We only run initdb once.
# Creating root user fails the second time, but the script continues.

PGBIN=/usr/lib/postgresql/14/bin
PIDFILE=$PGDATA/postmaster.pid

if [ "$1" = "init" ]; then
    echo "Init of Postgres cluster in $PGDATA"
    mkdir -p "$PGDATA"

    if [ -d "$PGDATA/pg_logical" ]; then
        echo "The database data dir already exists."
    else
        echo "Creating database cluster in $PGDATA"

        TMPPASSFILE=$(mktemp)
        echo "alleles" >"$TMPPASSFILE"
        $PGBIN/initdb -A trust --pwfile "$TMPPASSFILE"
        rm "$TMPPASSFILE"

        # Use /socket for socket
        echo "unix_socket_directories = '${PGHOST}'" >>"$PGDATA/postgresql.conf"
    fi
fi

shutdown() {
    echo "Shutting down PostgreSQL"
    pkill postgres
}

echo "Starting PostgreSQL"

# Allow any signal which would kill a process to stop PostgreSQL using the 'shutdown' function
# KILL goes directly to kernel, so it's useless here.
trap shutdown HUP INT QUIT ABRT ALRM TERM TSTP

if [[ -f "$PIDFILE" ]]; then
    # Check if the process is still running
    if [[ -d /proc/$(head -1 "$PIDFILE") ]]; then
        echo "PostgreSQL is already running"
        exit 0
    else
        echo "Removing stale PID file ($PIDFILE)"
        rm "$PIDFILE"
    fi
fi

exec $PGBIN/postgres -c listen_addresses='127.0.0.1'
